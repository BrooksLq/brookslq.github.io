<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木头的进化史</title>
  
  <subtitle>一个杂学家的成长之路</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mutongfan.club/"/>
  <updated>2019-07-12T07:46:55.857Z</updated>
  <id>http://mutongfan.club/</id>
  
  <author>
    <name>木头</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Moya初体验</title>
    <link href="http://mutongfan.club/Moya%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://mutongfan.club/Moya初体验/</id>
    <published>2018-02-24T00:18:55.000Z</published>
    <updated>2019-07-12T07:46:55.857Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>以往在需要进行网络请求时，都是直接使用Alamofire，尽管知道有Moya的存在。但是，出于对未知事物的畏惧心理，并没有尝试去了解并实现一个例子。终于，由于戴老师整理核心库的代码使用了Moya，并且建议自己在下一个项目中也用上，于是才发现——Moya，并没有想想那么恐怖。</p><blockquote><p><a href="https://github.com/Moya/Moya" target="_blank" rel="noopener">Moya</a>，是一个基于Alamofire更高层网络请求封装抽象层。它定义了一个清晰的网络结构，通过枚举定义不同的请求；可以简单的进行网络单元测试（还未尝试过单元测试）。Moya主页给出了一幅图说明使用了它之后，整个网络请求可以更干净整洁。</p></blockquote><a id="more"></a><p><img src="http://7xp6za.com1.z0.glb.clouddn.com/blog/moya/004.png" alt></p><p><em>ps.做个说明，所实现的例子是对<a href="http://www.hangge.com/blog/cache/detail_1797.html" target="_blank" rel="noopener">航哥提供的教程系列</a>不完全实现。</em></p><h1 id="Moya-来吧！"><a href="#Moya-来吧！" class="headerlink" title="Moya,来吧！"></a>Moya,来吧！</h1><p>简要的说明，Moya会提供一个Provider，我们要做的就是定义我们的Target以初始化自己的Provider，然后在需要进行网络请求的地方直接用即可。是的，就这么简单，没了。</p><p>提供自己学习航哥的<a href="https://github.com/brookslq/MoyaRxSwiftLearn#%E6%A6%82%E8%BF%B0" target="_blank" rel="noopener">GitHub代码以供参考</a>。</p><h2 id="实现Moya"><a href="#实现Moya" class="headerlink" title="实现Moya"></a>实现Moya</h2><p>首先，需要新建一个Swift文件，比如<strong>DouBanAPI.swift</strong>。现在开始写代码，配以注释讲解，如下：</p><figure class="highlight swift hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> Foundation</span><br><span class="line"><span class="hljs-keyword">import</span> Moya   <span class="hljs-comment">// 肯定是需要导入Moya的库</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 通过枚举的方式，定义请求分类</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">DouBan</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">case</span> channels           <span class="hljs-comment">//获取频道</span></span><br><span class="line">    <span class="hljs-keyword">case</span> playlist(<span class="hljs-type">String</span>)   <span class="hljs-comment">// 获取歌曲</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/***************************************************************/</span></span><br><span class="line"><span class="hljs-comment">// 通过扩展的方式，给枚举DouBan，实现TargetType 协议。</span></span><br><span class="line"><span class="hljs-comment">// 请求配置，以下的几个方法都是必须实现的。</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">extension</span> <span class="hljs-title">DouBan</span>: <span class="hljs-title">TargetType</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// 服务器地址</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> baseURL: <span class="hljs-type">URL</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">switch</span> <span class="hljs-keyword">self</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">case</span> .channels:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-type">URL</span>(string: <span class="hljs-string">"https://www.douban.com"</span>)!</span><br><span class="line">        <span class="hljs-keyword">case</span> .playlist(<span class="hljs-number">_</span>):</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-type">URL</span>(string: <span class="hljs-string">"https://douban.fm"</span>)!</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 各个请求的具体路径</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> path: <span class="hljs-type">String</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">switch</span> <span class="hljs-keyword">self</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">case</span> .channels:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-string">"/j/app/radio/channels"</span></span><br><span class="line">        <span class="hljs-keyword">case</span> .playlist(<span class="hljs-number">_</span>):</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-string">"/j/mine/playlist"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 请求类型</span></span><br><span class="line">    <span class="hljs-comment">// Post 和 Get 方法的不同，参数传递的方式也不同。</span></span><br><span class="line">    <span class="hljs-comment">// Get: 参数直接拼接在 url 上，可见。</span></span><br><span class="line">    <span class="hljs-comment">// Post: 参数是放在 Http body 中传递，url 不可见。</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> method: <span class="hljs-type">Moya</span>.<span class="hljs-type">Method</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> .<span class="hljs-keyword">get</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 请求任务事件</span></span><br><span class="line">    <span class="hljs-comment">// 如果将参数中一个值设置为 nil，那么不管是在 Get 还是 Post</span></span><br><span class="line">    <span class="hljs-comment">// 这个参数是不会传递的</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> task: <span class="hljs-type">Task</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">switch</span> <span class="hljs-keyword">self</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">case</span> .playlist(<span class="hljs-keyword">let</span> channel):</span><br><span class="line">            <span class="hljs-keyword">var</span> params: [<span class="hljs-type">String</span>: <span class="hljs-type">Any</span>] = [:]</span><br><span class="line">            params[<span class="hljs-string">"channel"</span>] = channel</span><br><span class="line">            params[<span class="hljs-string">"type"</span>] = <span class="hljs-string">"n"</span></span><br><span class="line">            params[<span class="hljs-string">"from"</span>] = <span class="hljs-string">"mainsite"</span></span><br><span class="line">            <span class="hljs-keyword">return</span> .requestParameters(parameters: params, encoding: <span class="hljs-type">URLEncoding</span>.<span class="hljs-keyword">default</span>)</span><br><span class="line">        <span class="hljs-keyword">default</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> .requestPlain</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 是否执行Alamofire验证</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> validate: <span class="hljs-type">Bool</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 这个是做单元测试模拟的数据，只会在单元测试文件中有作用</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> sampleData: <span class="hljs-type">Data</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"&#123;&#125;"</span>.data(using: .utf8)!</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 请求头</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> headers: [<span class="hljs-type">String</span>: <span class="hljs-type">String</span>]? &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，关于本例要用的Moya便算是完成了，就是这么一个简单的类，接下来在网络请求中去用就行啦。在我们具体的项目中，主要做以下两个方面的更新：</p><ol><li>根据请求的数目（内容），定义自己的枚举。</li><li>更改自己在扩展Target协议中对应的方法，比如：某个请求是post,某个是get,需要switch即可;某个请求传参是A、B，某个是E、A、F，也是根据自己的项目而改变即可。</li></ol><h2 id="Moya，用起来！"><a href="#Moya，用起来！" class="headerlink" title="Moya，用起来！"></a>Moya，用起来！</h2><p>此时，已经可以开始在需要进行网络请求的地方去使用。使用方法如下：</p><figure class="highlight swift hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 在需要使用的地方初始化Provider</span></span><br><span class="line"><span class="hljs-keyword">let</span> <span class="hljs-type">DouBanProvider</span> = <span class="hljs-type">MoyaProvider</span>&lt;<span class="hljs-type">DouBan</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 简单的用法</span></span><br><span class="line"><span class="hljs-type">DouBanProvider</span>.request(.playlist(channelId)) &#123; result <span class="hljs-keyword">in</span></span><br><span class="line">    <span class="hljs-comment">// 网络请求返回成功 则进行相关处理</span></span><br><span class="line">    <span class="hljs-keyword">if</span> <span class="hljs-keyword">case</span> <span class="hljs-keyword">let</span> .success(response) = result &#123;</span><br><span class="line">        <span class="hljs-comment">// 解析数据，获取歌曲信息</span></span><br><span class="line">        <span class="hljs-keyword">let</span> data = <span class="hljs-keyword">try</span>? response.mapJSON()</span><br><span class="line">        <span class="hljs-keyword">let</span> json = <span class="hljs-type">JSON</span>(data!)</span><br><span class="line">        <span class="hljs-keyword">let</span> music = json[<span class="hljs-string">"song"</span>].arrayValue[<span class="hljs-number">0</span>]</span><br><span class="line">        <span class="hljs-keyword">let</span> artist = music[<span class="hljs-string">"artist"</span>].stringValue</span><br><span class="line">        <span class="hljs-keyword">let</span> title = music[<span class="hljs-string">"title"</span>].stringValue</span><br><span class="line">        <span class="hljs-keyword">let</span> message = <span class="hljs-string">"歌手：\(artist)\n歌曲：\(title)"</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">//将歌曲信息弹出显示</span></span><br><span class="line">        <span class="hljs-keyword">self</span>.showAlert(title: channelName, message: message)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/***************************************************************/</span></span><br><span class="line"><span class="hljs-comment">// 考虑到多种情况：成功，失败，错误状态码处理</span></span><br><span class="line"><span class="hljs-comment">// 使用我们的Provider进行网络请求（获取频道列表数据）</span></span><br><span class="line">        <span class="hljs-type">DouBanProvider</span>.request(.channels) &#123; result <span class="hljs-keyword">in</span></span><br><span class="line">            <span class="hljs-keyword">switch</span> result &#123;</span><br><span class="line">            <span class="hljs-keyword">case</span> <span class="hljs-keyword">let</span> .success(response):</span><br><span class="line"></span><br><span class="line">                <span class="hljs-keyword">do</span> &#123;</span><br><span class="line">                    <span class="hljs-comment">// 过滤成功的状态码响应</span></span><br><span class="line">                    <span class="hljs-keyword">try</span> response.filterSuccessfulStatusCodes()</span><br><span class="line">                    <span class="hljs-comment">// 解析数据</span></span><br><span class="line">                    <span class="hljs-keyword">let</span> data = <span class="hljs-keyword">try</span>? response.mapJSON()</span><br><span class="line">                    <span class="hljs-keyword">let</span> json = <span class="hljs-type">JSON</span>(data!)</span><br><span class="line">                    <span class="hljs-keyword">self</span>.channels = json[<span class="hljs-string">"channels"</span>].arrayValue</span><br><span class="line"></span><br><span class="line">                    <span class="hljs-comment">// 刷新表格数据</span></span><br><span class="line">                    <span class="hljs-comment">// 异步进行</span></span><br><span class="line">                    <span class="hljs-type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                        <span class="hljs-keyword">self</span>.tableView.reloadData()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">catch</span> &#123;</span><br><span class="line">                    <span class="hljs-comment">// 处理错误状态码的响应</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// switch里面可以继续 switch</span></span><br><span class="line">            <span class="hljs-keyword">case</span> <span class="hljs-keyword">let</span> .failure(error):</span><br><span class="line">                <span class="hljs-keyword">switch</span> error &#123;</span><br><span class="line">                <span class="hljs-keyword">case</span> .imageMapping(<span class="hljs-keyword">let</span> response):</span><br><span class="line">                    <span class="hljs-built_in">print</span>(<span class="hljs-string">"错误原因：\(error.errorDescription ?? "</span><span class="hljs-string">")"</span>)</span><br><span class="line">                    <span class="hljs-built_in">print</span>(response)</span><br><span class="line">                <span class="hljs-keyword">case</span> .jsonMapping(<span class="hljs-keyword">let</span> response):</span><br><span class="line">                    <span class="hljs-built_in">print</span>(<span class="hljs-string">"错误原因：\(error.errorDescription ?? "</span><span class="hljs-string">")"</span>)</span><br><span class="line">                    <span class="hljs-built_in">print</span>(response)</span><br><span class="line">                <span class="hljs-keyword">case</span> .statusCode(<span class="hljs-keyword">let</span> response):</span><br><span class="line">                    <span class="hljs-built_in">print</span>(<span class="hljs-string">"错误原因：\(error.errorDescription ?? "</span><span class="hljs-string">")"</span>)</span><br><span class="line">                    <span class="hljs-built_in">print</span>(response)</span><br><span class="line">                <span class="hljs-keyword">case</span> .stringMapping(<span class="hljs-keyword">let</span> response):</span><br><span class="line">                    <span class="hljs-built_in">print</span>(<span class="hljs-string">"错误原因：\(error.errorDescription ?? "</span><span class="hljs-string">")"</span>)</span><br><span class="line">                    <span class="hljs-built_in">print</span>(response)</span><br><span class="line">                <span class="hljs-keyword">case</span> .requestMapping:</span><br><span class="line">                    <span class="hljs-built_in">print</span>(<span class="hljs-string">"错误原因：\(error.errorDescription ?? "</span><span class="hljs-string">")"</span>)</span><br><span class="line">                    <span class="hljs-built_in">print</span>(<span class="hljs-string">"nil"</span>)</span><br><span class="line">                <span class="hljs-keyword">case</span> .objectMapping(<span class="hljs-number">_</span>, <span class="hljs-number">_</span>):</span><br><span class="line">                    <span class="hljs-keyword">break</span></span><br><span class="line">                <span class="hljs-keyword">case</span> .encodableMapping(<span class="hljs-number">_</span>):</span><br><span class="line">                    <span class="hljs-keyword">break</span></span><br><span class="line">                <span class="hljs-keyword">case</span> .parameterEncoding(<span class="hljs-number">_</span>):</span><br><span class="line">                    <span class="hljs-keyword">break</span></span><br><span class="line">                <span class="hljs-keyword">case</span> .underlying(<span class="hljs-number">_</span>, <span class="hljs-number">_</span>):</span><br><span class="line">                    <span class="hljs-keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/***************************************************************/</span></span><br><span class="line"><span class="hljs-comment">// 为了代码的干净简洁，我们可以选择封装一下返回状态的处理</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Network</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> provider = <span class="hljs-type">MoyaProvider</span>&lt;<span class="hljs-type">DouBan</span>&gt;()</span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">request</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">        <span class="hljs-number">_</span> target: DouBan,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">        success successCallback: @escaping <span class="hljs-params">(JSON)</span></span></span> -&gt; <span class="hljs-type">Void</span>,</span><br><span class="line">        error errorCallback: @escaping (<span class="hljs-type">Int</span>) -&gt; <span class="hljs-type">Void</span>,</span><br><span class="line">        failure failureCallback: @escaping (<span class="hljs-type">MoyaError</span>) -&gt; <span class="hljs-type">Void</span></span><br><span class="line">        )&#123;</span><br><span class="line">        provider.request(target) &#123;result <span class="hljs-keyword">in</span></span><br><span class="line">            <span class="hljs-keyword">switch</span> result &#123;</span><br><span class="line">            <span class="hljs-keyword">case</span> <span class="hljs-keyword">let</span> .success(response):</span><br><span class="line">                <span class="hljs-keyword">do</span> &#123;</span><br><span class="line">                    <span class="hljs-comment">//如果数据返回成功则直接将结果转为JSON</span></span><br><span class="line">                    <span class="hljs-keyword">try</span> response.filterSuccessfulStatusCodes()</span><br><span class="line">                    <span class="hljs-keyword">let</span> json = <span class="hljs-keyword">try</span> <span class="hljs-type">JSON</span>(response.mapJSON())</span><br><span class="line">                    successCallback(json)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">catch</span> <span class="hljs-keyword">let</span> error &#123;</span><br><span class="line">                    <span class="hljs-comment">//如果数据获取失败，则返回错误状态码</span></span><br><span class="line">                    errorCallback((error <span class="hljs-keyword">as</span>! <span class="hljs-type">MoyaError</span>).response!.statusCode)</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="hljs-keyword">case</span> <span class="hljs-keyword">let</span> .failure(error):</span><br><span class="line">                <span class="hljs-comment">//如果连接异常，则返沪错误信息（必要时还可以将尝试重新发起请求）</span></span><br><span class="line">                <span class="hljs-comment">//if target.shouldRetry &#123;</span></span><br><span class="line">                <span class="hljs-comment">//    retryWhenReachable(target, successCallback, errorCallback,</span></span><br><span class="line">                <span class="hljs-comment">//      failureCallback)</span></span><br><span class="line">                <span class="hljs-comment">//&#125;</span></span><br><span class="line">                <span class="hljs-comment">//else &#123;</span></span><br><span class="line">                failureCallback(error)</span><br><span class="line">                <span class="hljs-comment">//&#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 基于封装后的NetWork，进行网络请求</span></span><br><span class="line"><span class="hljs-type">Network</span>.request(.playlist(channelId), success: &#123; json <span class="hljs-keyword">in</span></span><br><span class="line">            <span class="hljs-comment">// 获取歌曲信息</span></span><br><span class="line">            <span class="hljs-keyword">guard</span> json[<span class="hljs-string">"song"</span>].arrayValue.<span class="hljs-built_in">count</span> &gt;= <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">let</span> music = json[<span class="hljs-string">"song"</span>].arrayValue[<span class="hljs-number">0</span>]</span><br><span class="line">            <span class="hljs-keyword">let</span> artist = music[<span class="hljs-string">"artist"</span>].stringValue</span><br><span class="line">            <span class="hljs-keyword">let</span> title = music[<span class="hljs-string">"title"</span>].stringValue</span><br><span class="line">            <span class="hljs-keyword">let</span> message = <span class="hljs-string">"歌手：\(artist)\n歌曲：\(title)"</span></span><br><span class="line">            <span class="hljs-comment">// 将歌曲信息弹出显示</span></span><br><span class="line">            <span class="hljs-keyword">self</span>.showAlert(title: channelName, message: message)</span><br><span class="line">        &#125;, error: &#123; statusCode <span class="hljs-keyword">in</span></span><br><span class="line">            <span class="hljs-comment">// 服务器报错等问题</span></span><br><span class="line">            <span class="hljs-built_in">print</span>(<span class="hljs-string">"请求错误！错误码：\(statusCode)"</span>)</span><br><span class="line">        &#125;, failure: &#123; error <span class="hljs-keyword">in</span></span><br><span class="line">            <span class="hljs-comment">//没有网络等问题</span></span><br><span class="line">            <span class="hljs-built_in">print</span>(<span class="hljs-string">"请求失败！错误信息：\(error.errorDescription ?? "</span><span class="hljs-string">")"</span>)</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>关于Moya的常规使用，以上的方法足矣。</p><h1 id="Moya，可以加插件"><a href="#Moya，可以加插件" class="headerlink" title="Moya，可以加插件"></a>Moya，可以加插件</h1><p>在网络请求时，都是得耗费一定的时间，这个时候一般会转动一个小菊花。通过Moya，可以在网络请求过程中添加一个菊花插件，使其在请求时出现，请求结束后消失。</p><figure class="highlight swift hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> UIKit</span><br><span class="line"><span class="hljs-keyword">import</span> Moya</span><br><span class="line"><span class="hljs-keyword">import</span> Result</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RequestAlertPlugin</span>: <span class="hljs-title">PluginType</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 当前的视图控制器</span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">let</span> viewController: <span class="hljs-type">UIViewController</span></span><br><span class="line">    <span class="hljs-comment">// 活动状态指示器 （菊花）</span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> spinner: <span class="hljs-type">UIActivityIndicatorView!</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 插件初始化的时候传入当前的视图控制器</span></span><br><span class="line">    <span class="hljs-keyword">init</span>(viewController: <span class="hljs-type">UIViewController</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">self</span>.viewController = viewController</span><br><span class="line">        <span class="hljs-comment">// 初始化活动状态指示器</span></span><br><span class="line">        <span class="hljs-keyword">self</span>.spinner = <span class="hljs-type">UIActivityIndicatorView</span>(activityIndicatorStyle: .gray)</span><br><span class="line">        <span class="hljs-keyword">self</span>.spinner.center = <span class="hljs-keyword">self</span>.viewController.view.center</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 开始发起请求</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">willSend</span><span class="hljs-params">(<span class="hljs-number">_</span> request: RequestType, target: TargetType)</span></span> &#123;</span><br><span class="line">        <span class="hljs-comment">// 请求时在界面中央显示一个活动状态指示器</span></span><br><span class="line">        viewController.view.addSubview(spinner)</span><br><span class="line">        spinner.startAnimating()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 收到请求</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">didReceive</span><span class="hljs-params">(<span class="hljs-number">_</span> result: Result&lt;Response, MoyaError&gt;, target: TargetType)</span></span> &#123;</span><br><span class="line">        <span class="hljs-comment">// 移除界面中央的活动状态指示器</span></span><br><span class="line">        spinner.removeFromSuperview()</span><br><span class="line">        spinner.stopAnimating()</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// 只有请求错误时会继续往下执行</span></span><br><span class="line">        <span class="hljs-keyword">guard</span> <span class="hljs-keyword">case</span> <span class="hljs-keyword">let</span> <span class="hljs-type">Result</span>.failure(error) = result <span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">return</span>&#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// 弹出并显示错误信息</span></span><br><span class="line">        <span class="hljs-keyword">let</span> message = error.errorDescription ?? <span class="hljs-string">"未知错误"</span></span><br><span class="line">        <span class="hljs-keyword">let</span> alertViewController = <span class="hljs-type">UIAlertController</span>(title: <span class="hljs-string">"请求失败"</span>,</span><br><span class="line">                                                    message: <span class="hljs-string">"\(message)"</span>,</span><br><span class="line">            preferredStyle: .alert)</span><br><span class="line">        alertViewController.addAction(<span class="hljs-type">UIAlertAction</span>(title: <span class="hljs-string">"确定"</span>, style: .<span class="hljs-keyword">default</span>,</span><br><span class="line">                                                    handler: <span class="hljs-literal">nil</span>))</span><br><span class="line">        viewController.present(alertViewController, animated: <span class="hljs-literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码，便实现了插件小菊花。在使用的时候，定义Provider有所区别，需要添上插件。</p><blockquote><p>let DouBanProvider = MoyaProvider<douban>(plugins: [<br>            RequestAlertPlugin(viewController: self)<br>            ])</douban></p></blockquote><hr><h1 id="小贴士"><a href="#小贴士" class="headerlink" title="小贴士"></a>小贴士</h1><p>当有多个Target时，即可以分别写个Provider，也可以用一个Provider。分别写没啥好说的，多个对一个的写法如下：</p><figure class="highlight swift hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> provider = <span class="hljs-type">MoyaProvider</span>&lt;<span class="hljs-type">MultiTarget</span>&gt;()</span><br><span class="line"></span><br><span class="line">provider.request(<span class="hljs-type">MultiTarget</span>(<span class="hljs-type">DouBan</span>.channels)) &#123; result <span class="hljs-keyword">in</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;以往在需要进行网络请求时，都是直接使用Alamofire，尽管知道有Moya的存在。但是，出于对未知事物的畏惧心理，并没有尝试去了解并实现一个例子。终于，由于戴老师整理核心库的代码使用了Moya，并且建议自己在下一个项目中也用上，于是才发现——Moya，并没有想想那么恐怖。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Moya/Moya&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Moya&lt;/a&gt;，是一个基于Alamofire更高层网络请求封装抽象层。它定义了一个清晰的网络结构，通过枚举定义不同的请求；可以简单的进行网络单元测试（还未尝试过单元测试）。Moya主页给出了一幅图说明使用了它之后，整个网络请求可以更干净整洁。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS系列" scheme="http://mutongfan.club/categories/iOS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="iOS" scheme="http://mutongfan.club/tags/iOS/"/>
    
      <category term="学习轮子" scheme="http://mutongfan.club/tags/%E5%AD%A6%E4%B9%A0%E8%BD%AE%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>Swift通过桥接文件使用OC</title>
    <link href="http://mutongfan.club/Swift%E9%80%9A%E8%BF%87%E6%A1%A5%E6%8E%A5%E6%96%87%E4%BB%B6%E4%BD%BF%E7%94%A8OC/"/>
    <id>http://mutongfan.club/Swift通过桥接文件使用OC/</id>
    <published>2018-02-24T00:18:37.000Z</published>
    <updated>2019-07-12T07:43:20.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在Swift语言开发的过程中，难免会用到一些用OC写的代码，这时候要么耗费一番精力用Swift重写，要么就得使用<strong>桥接</strong>的办法直接在Swift中使用。</p><p>桥接，其实也很简单，就是新建一个头文件，在头文件中引用需要直接使用的类的头文件即可。接下来，进行一个配置，就可以直接在Swift中import，在使用过程中非常玄乎的自己就转成了Swift的形式。</p><a id="more"></a><h1 id="进击吧，桥接"><a href="#进击吧，桥接" class="headerlink" title="进击吧，桥接~"></a>进击吧，桥接~</h1><p><strong>1.创建桥接文件</strong></p><blockquote><p>首先，我们导入了OC部分之后，需要新建一个头文件，且，这个头文件的命名为——*<em>项目名-Bridging-Header.h *</em>。</p></blockquote><p><img src="http://7xp6za.com1.z0.glb.clouddn.com/blog/bridging/001.png" alt></p><p><strong>2.桥接文件配置</strong></p><blockquote><p>1) 在桥接文件中，import需要使用的oc代码对应的头文件。<code>#import &quot;需要使用的头文件名.h&quot;</code><br>2）在<strong>Build Settings</strong>中，搜索<strong>Objective-C Bridging Header</strong>，出来之后将桥接文件的路径填入即可。</p></blockquote><p><img src="http://7xp6za.com1.z0.glb.clouddn.com/blog/bridging/002.png" alt></p><p><img src="http://7xp6za.com1.z0.glb.clouddn.com/blog/bridging/003.png" alt></p><p><strong>3.去用就好啦</strong></p><blockquote><p>是的，现在就可以直接使用了。没啥好说的……</p></blockquote><h1 id="番外引用篇——添加第三方库（SDK）"><a href="#番外引用篇——添加第三方库（SDK）" class="headerlink" title="番外引用篇——添加第三方库（SDK）"></a>番外引用篇——添加第三方库（SDK）</h1><p>关于如何制作Framework以及使用，其实航哥的三篇文章很是详尽，就不多说，可以<a href="http://www.hangge.com/blog/cache/detail_1425.html" target="_blank" rel="noopener">点这里看看</a>。</p><p>库，又分成了静态库和动态库两种，<a href="https://www.jianshu.com/p/42891fb90304" target="_blank" rel="noopener">这篇文章讲得就不错</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在Swift语言开发的过程中，难免会用到一些用OC写的代码，这时候要么耗费一番精力用Swift重写，要么就得使用&lt;strong&gt;桥接&lt;/strong&gt;的办法直接在Swift中使用。&lt;/p&gt;
&lt;p&gt;桥接，其实也很简单，就是新建一个头文件，在头文件中引用需要直接使用的类的头文件即可。接下来，进行一个配置，就可以直接在Swift中import，在使用过程中非常玄乎的自己就转成了Swift的形式。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS系列" scheme="http://mutongfan.club/categories/iOS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="经验整理" scheme="http://mutongfan.club/tags/%E7%BB%8F%E9%AA%8C%E6%95%B4%E7%90%86/"/>
    
      <category term="iOS" scheme="http://mutongfan.club/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>深度学习之实现人脸识别</title>
    <link href="http://mutongfan.club/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    <id>http://mutongfan.club/深度学习之实现人脸识别/</id>
    <published>2018-01-20T11:00:09.000Z</published>
    <updated>2019-07-12T07:43:02.134Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>根据网上的一些资料教程，自己动手实现了人脸识别的程序，<a href="https://github.com/brookslq/face_go" target="_blank" rel="noopener">GitHub地址</a>。</p></blockquote><h2 id="前提概要"><a href="#前提概要" class="headerlink" title="前提概要"></a>前提概要</h2><p>在整个环境配置过程中，比较麻烦的就是<a href="http://flagsgo.xyz/2018/01/10/Mac-OS%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85OpenCV(Python)/" target="_blank" rel="noopener">安装openvc</a>，以及<a href="http://flagsgo.xyz/2018/01/18/Mac%E5%AE%89%E8%A3%85Dlib%E5%BA%93%E6%95%99%E7%A8%8B%EF%BC%88Python%EF%BC%89/" target="_blank" rel="noopener">安装dlib库</a>。当这两个库安装成功，基本上就可以畅通的进行以抄代码为主的学习之旅了。此外，关于<a href="http://flagsgo.xyz/2018/01/18/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%88CNN%EF%BC%89/" target="_blank" rel="noopener">卷积网络的简单了解</a>也是一件很有必要的事情，可以有助于抄代码时的理解。</p><a id="more"></a><h2 id="人脸识别两部走"><a href="#人脸识别两部走" class="headerlink" title="人脸识别两部走"></a>人脸识别两部走</h2><p>人脸识别可以分为两大部分:<strong>人脸检测</strong>和<strong>人脸验证</strong>。前者，在图像或视频中检测出人脸部分；后者则是对人脸进行验证，查验是否为某某。另外，加上<strong>活体检测</strong>基本上就可以避免在业务环境中，人为的作假是可以极大的降低。</p><p><em>ps:在本例子中，并没有活体检测……</em></p><h3 id="人脸检测"><a href="#人脸检测" class="headerlink" title="人脸检测"></a>人脸检测</h3><p>关于人脸检测，没有亲自从底层去实现或者优化如何检测人脸。而是采用了opencv和dlib进行人脸检测，在使用过程中发现dlib的识别精度更为高一些，而opencv的识别速度更为快，具体体现在：当Mac摄像头打开后，dlib非常卡顿，于是测试了一下，用dlib库的<code>get_frontal_face_detector()</code>检测器检测耗时需要1秒+。不过，当摄像头窗口只是显示一个低像素下的人脸时效果会好很多。</p><p>具体代码可以看<a href="https://github.com/brookslq/face_go" target="_blank" rel="noopener">GitHub</a>，注释都还是抄的比较详尽的，切记<strong>先看readme</strong>。此处只说说几个需要注意的地方</p><ul><li>获取Mac摄像头，<code>capture = cv2.VideoCapture(0)</code>参数是<strong>0</strong><br>，有的资料是1或其他，反正我测试之后都是不行。</li><li>opencv的预置模型是存成了<strong>xml文件</strong>在安装opencv中的一个文件夹下，我这里提取出了自己测试的几个模型放在了**face_opencv_model文件夹之中。而dlib库则是函数式的调用即可。另外，opencv和dlib都不仅仅可以识别人脸，还有一些人脸特征部分也是有预置模型，dlib更是有着人脸特征点的提取。</li></ul><p>尽管没有从底层实现人脸检测，不过根据查阅的资料，隐约还记得一个向量相关的概念，暂做记录以备理解。不对之处，敬请指正。</p><blockquote><p>用向量表示了整个图像，如此一来，通过向量的走向，是可以看出一个人脸的模子的。</p></blockquote><p>在具体代码中，主要是做了通过Mac打开摄像头，截取了自己的人脸照片作为数据集。以及，在训练模型之后，打开摄像头，预测视频中的人脸是否为自己。</p><h3 id="人脸验证"><a href="#人脸验证" class="headerlink" title="人脸验证"></a>人脸验证</h3><p>人脸验证，主要是用到了深度学习中的卷积神经网络。简单的说下，直接用深度神经网络是不大适合的，会耗费过多的运算算力。关于卷积神经网络，具体的还是可以看看之前的<a href="http://flagsgo.xyz/2018/01/18/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%88CNN%EF%BC%89/" target="_blank" rel="noopener">博文</a>。</p><p>在代码中，主要是用Keras来搭建模型，以及训练，保存，预测引用。Keras是在TensorFlow之上的又一个框架。非常棒的一点是，它有<a href="https://keras-cn.readthedocs.io/en/latest/" target="_blank" rel="noopener">中文版的API文档</a>，而且API设计的更为人性化易于理解。</p><p>根据网上教程示例，敲完之后总结如下：</p><ul><li>模型不清楚是按照什么理论设计的……反正，这本身就是个玄学。虽然训练效果是精准度95%左右吧，可是在识别过程中还是会存在超过想象的误差。<strong>模型的设计</strong>，真的不知道该怎么有迹可循。反正，我是直接照搬的博主的模型。</li><li>其实在最开始，是通过吴恩达课程练习了人脸识别，不过课程练习没有加入视频和人脸检测，但是用了迁移学习。不过迁移学习相关的代码又都是已经给好了……</li><li><strong>整体上来说，本例中的人脸识别，除了网络用成了卷积神经网络，模型用了某位博主的。依然是深度学习中——对标签数据，通过前向传播再反向传播，梯度递减权重更新，设置学习率迭代数，获得一个模型参数然后加以应用，如是这般的一个套路。</strong></li></ul><blockquote><p>具体的代码，依然是看<a href="https://github.com/brookslq/face_go" target="_blank" rel="noopener">GitHub</a>，毕竟我抄的注释和自己理解的注释还是比较详尽的。</p></blockquote><hr><blockquote><p><strong>后记：</strong> 我知道自己抄的代码也好，还是理解的一些理论肯定有不少不足的地方。希望有朋友如果看了之后，可以指点一番，也欢迎一起交流。可以在博客上通过邮件联系我，谢谢！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;根据网上的一些资料教程，自己动手实现了人脸识别的程序，&lt;a href=&quot;https://github.com/brookslq/face_go&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub地址&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前提概要&quot;&gt;&lt;a href=&quot;#前提概要&quot; class=&quot;headerlink&quot; title=&quot;前提概要&quot;&gt;&lt;/a&gt;前提概要&lt;/h2&gt;&lt;p&gt;在整个环境配置过程中，比较麻烦的就是&lt;a href=&quot;http://flagsgo.xyz/2018/01/10/Mac-OS%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85OpenCV(Python)/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;安装openvc&lt;/a&gt;，以及&lt;a href=&quot;http://flagsgo.xyz/2018/01/18/Mac%E5%AE%89%E8%A3%85Dlib%E5%BA%93%E6%95%99%E7%A8%8B%EF%BC%88Python%EF%BC%89/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;安装dlib库&lt;/a&gt;。当这两个库安装成功，基本上就可以畅通的进行以抄代码为主的学习之旅了。此外，关于&lt;a href=&quot;http://flagsgo.xyz/2018/01/18/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%88CNN%EF%BC%89/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;卷积网络的简单了解&lt;/a&gt;也是一件很有必要的事情，可以有助于抄代码时的理解。&lt;/p&gt;
    
    </summary>
    
      <category term="深度学习" scheme="http://mutongfan.club/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="http://mutongfan.club/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="人脸识别" scheme="http://mutongfan.club/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>深度学习之卷积神经网络（CNN）</title>
    <link href="http://mutongfan.club/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%88CNN%EF%BC%89/"/>
    <id>http://mutongfan.club/深度学习之卷积神经网络（CNN）/</id>
    <published>2018-01-18T07:18:25.000Z</published>
    <updated>2019-07-12T07:42:59.546Z</updated>
    
    <content type="html"><![CDATA[<p>前言：DeepLearning的学习之旅已经从感知机到逻辑回归，再经过了神经网络和深度神经网络，终于来到了对卷积神经网络的学习。以下内容，是以人脸识别为例进行实现的记录。</p><h2 id="认识卷积神经网络"><a href="#认识卷积神经网络" class="headerlink" title="认识卷积神经网络"></a>认识卷积神经网络</h2><p>卷积神经网络，刚知道这六个字的时候，脑子里是一片空白——完全不知道它能做些什么。想要对其一窥究竟，我们得从以下几个名词开始了解它：</p><ul><li>卷积（Convolutional）</li><li>填充 (padding)</li><li>步长 (stride)</li><li>池化 (pooling)</li></ul><a id="more"></a><h3 id="卷积（Convolutional）"><a href="#卷积（Convolutional）" class="headerlink" title="卷积（Convolutional）"></a>卷积（Convolutional）</h3><p> 卷积，是一种运算方式，这便是我目前对它最直观的感觉。以一张图像[A]——5×5的一个二维矩阵，0~255的数值取值为例，对它进行<strong>卷积运算</strong>。此时，以一个3×3的二维矩阵[B]，矩阵的值则需要根据希望通过运算之后得到什么特征而设置。</p><p> 将[B]的左上角与[A]的左上角重合，重合区域的值对应相乘再相加会得到一个新的值a，a则是一个新矩阵左上角的值。紧接着，矩阵[B]平移一个单元，再次计算得到值b。再继续向右移动，此时[A]&amp;[B]最右边刚好重合，同样计算得到值c。此时，新的矩阵，就得到了第一行的所有值[a b c]。接下来计算的时候，便是要将矩阵[B]向下平移一行，并继续从最左边开始直到矩阵[A]&amp;[B]最下边和最右边同时重合，则结束了此次卷积运算并得到了一个新的3×3的矩阵[C]。用公式表示：</p><blockquote><p>[A] * [B] = [C]</p></blockquote><p> <img src="http://7xp6za.com1.z0.glb.clouddn.com/blog/cnn/cnn%E8%AE%A1%E7%AE%97%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt><br> <em>ps：偷懒没有把[C]所有值都计算……</em></p><h3 id="填充（padding）"><a href="#填充（padding）" class="headerlink" title="填充（padding）"></a>填充（padding）</h3><p> 通过上一段的卷积运算，可以发现最终能够把一个5×5的矩阵[A]通过一个3×3的矩阵[B]<em>（过滤器）</em>进行卷积运算之后得到新的3×3的矩阵[C]。会发现，经过这样的计算之后，矩阵[A]缩水了，而且这个过程中，有的数值参与的运算多，有的少，这必然也造成了一些边缘信息的丢失。<strong>所以，为了保留更多的信息，以及防止卷积不断进行矩阵不断缩小</strong>。可以对矩阵[A]进行填充，即在原有的基础上，给它的外围再裹上一层使之成为6×6的矩阵，最外围的一层都是0。这样再进行卷积运算之后，得到的新矩阵将依然是5×5。</p><p> 至于填充的层数，根据自己的选择进行，可填n层，也可不填。</p><h3 id="步长（stride）"><a href="#步长（stride）" class="headerlink" title="步长（stride）"></a>步长（stride）</h3><p> 在进行卷积运算时，<strong>矩阵[B]每次都是向右移动一个单位，这一个单位也就是指步长为一</strong>。可以清楚的认识到，步长的设置，将影响到矩阵移动的速度，以及对特征的提取。当步长为2时，每次向右移动都是两个单位，向下移动也是两个单位。</p><blockquote><p>商不是一个整数怎么办?在这种情况下，我们向下 取整。⌊ ⌋ 这是向下取整的符号，这也叫做对 z 进行地板除(floor)，这意味着 z 向下取整到 最近的整数。这个原则实现的方式是，你只在蓝框完全包括在图像或填充完的图像内部时， 才对它进行运算。如果有任意一个蓝框移动到了外面，那你就不要进行相乘操作，这是一个 惯例。你的 3×3 的过滤器必须完全处于图像中或者填充之后的图像区域内才输出相应结果，这就是惯例。因此正确计算输出维度的方法是向下取整</p></blockquote><h3 id="池化（pooling）"><a href="#池化（pooling）" class="headerlink" title="池化（pooling）"></a>池化（pooling）</h3><p> 池化，又是另外一种运算。一般分为两种，一是最大值池化，一是平均值池化。<em>（仍然以上文提到的三个矩阵[A]、[B]、[C]为例）</em></p><p> <strong>最大值池化：</strong>当矩阵[B]重在矩阵[A]上面时，选取其中的最大值，将其提出作为新矩阵[C]的第一个值，依次进行。</p><p> <strong>平均值池化：</strong>计算过程类似，只是这次提取的是范围类矩阵[A]的数值相加后求出的平均值，以该值作为矩阵[C]的值。</p><blockquote><p>池化层用来缩减模型的大小，提高计算速度，同时提高 所提取特征的鲁棒性。</p></blockquote><h2 id="卷积网络如何进行学习"><a href="#卷积网络如何进行学习" class="headerlink" title="卷积网络如何进行学习"></a>卷积网络如何进行学习</h2><p>鉴于自己的数学水平有限，对其公式并不做具体展开阐述。详情推荐<a href="https://zybuluo.com/hanbingtao/note/485480" target="_blank" rel="noopener">博文</a>。</p><blockquote><p>本质上依然是前向传播，然后反向传播，梯度递减，更新权重<em>（理解为此处的过滤器，不知道是否有误）</em>。</p></blockquote><p>另外，在使用框架如：TensorFlow、Keras、Pytorch时，都是会有封装好的方法，传入相应的参数直接使用即可得到公式推导的结果，这样可以很好的帮助到理解了相关理论，但是数学推导能力薄弱的自己。</p><p>再次以图像举例，一张图像一般是RGB三通道，所以矩阵[A]，就会是一个三维度的5×5矩阵，这样过滤器也需要是三维度，不过，最后得到的值还是依然为一个维度。而这里，就得稍作提醒，不同的框架下，一般通道数这个参数位置或前或后，不一致。</p><blockquote><p>关于上段的一些补充：</p><ul><li>输入矩阵的通道数和过滤器的通道数一定相同，过滤器的长宽可以不同。</li><li>过滤器与输入矩阵重合后对应数值相乘再相加，所以最终的输出是一个一维的矩阵。</li><li>如果，过滤器的数目增加，有n个，则最终的输出是一个n维的矩阵。</li></ul></blockquote><h2 id="为什么使用卷积网络"><a href="#为什么使用卷积网络" class="headerlink" title="为什么使用卷积网络"></a>为什么使用卷积网络</h2><p>卷积网络因其<strong>参数共享&amp;稀疏连接</strong>这两个特性，可以减少参数，以便我们用更小的训练集进行训练，防止过度拟合，并能够节省计算消耗，缩短计算时间。</p><ol><li>参数共享：“特征检测如垂直边缘 检测<strong>如果适用于图片的某个区域</strong>，那么它<strong>也可能适用于图片的其他区域</strong>。”</li><li>稀疏连接：“输出值只与过滤器范围内的参数有关，与其他无关，不会受影响。”</li></ol><blockquote><ul><li><strong>Parameter sharing:</strong> A feature detector(such as a vertical edge detector) that`s useful in one part of the image is probably useful in another part of the image.</li><li>*<em>Sparsity of connections: *</em>In each layer, each output value depends only on a samll number of inputs.</li></ul></blockquote><p>稍稍想想，如果不用卷积，在真是情况下对一张图片进行全连接网络深度学习，那这个参数就是极大的，特别在深度不断加深且照片数目增加的情况下，将极大的占据计算资源。所以，卷积神经网络的使用有其必要性。</p><hr><p>参考：<br>1、<a href="https://zybuluo.com/hanbingtao/note/485480" target="_blank" rel="noopener">零基础入门深度学习(4)-卷积神经网络</a><br>2、网易云课堂,深度学习微专业, 吴恩达.<br>3、Coursera深度学习课程笔记, 黄海广.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前言：DeepLearning的学习之旅已经从感知机到逻辑回归，再经过了神经网络和深度神经网络，终于来到了对卷积神经网络的学习。以下内容，是以人脸识别为例进行实现的记录。&lt;/p&gt;
&lt;h2 id=&quot;认识卷积神经网络&quot;&gt;&lt;a href=&quot;#认识卷积神经网络&quot; class=&quot;headerlink&quot; title=&quot;认识卷积神经网络&quot;&gt;&lt;/a&gt;认识卷积神经网络&lt;/h2&gt;&lt;p&gt;卷积神经网络，刚知道这六个字的时候，脑子里是一片空白——完全不知道它能做些什么。想要对其一窥究竟，我们得从以下几个名词开始了解它：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;卷积（Convolutional）&lt;/li&gt;
&lt;li&gt;填充 (padding)&lt;/li&gt;
&lt;li&gt;步长 (stride)&lt;/li&gt;
&lt;li&gt;池化 (pooling)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="深度学习" scheme="http://mutongfan.club/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="http://mutongfan.club/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Mac安装Dlib库教程</title>
    <link href="http://mutongfan.club/Mac%E5%AE%89%E8%A3%85Dlib%E5%BA%93%E6%95%99%E7%A8%8B%EF%BC%88Python%EF%BC%89/"/>
    <id>http://mutongfan.club/Mac安装Dlib库教程（Python）/</id>
    <published>2018-01-18T03:07:14.000Z</published>
    <updated>2019-07-12T07:43:14.661Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：当使用opencv做人脸检测的时候，从一些博文资料中了解到dlib的库貌似检测准确度比opencv高得多。于是，又是一番踩坑。</p></blockquote><h2 id="1、必要的依赖"><a href="#1、必要的依赖" class="headerlink" title="1、必要的依赖"></a>1、必要的依赖</h2><p> dlib安装使用，是需要一些依赖的，亲测，的确是需要的。需要安装的依赖项如下：</p><ul><li>opencv(<a href="http://flagsgo.xyz/2018/01/10/Mac-OS%E7%8E%AF%E5%A2%83%E4%B8%8B-%E5%AE%89%E8%A3%85-OpenCV-%E7%9A%84%E5%9D%91/" target="_blank" rel="noopener">安装可以看这里</a>)</li><li>openblas &amp; X11(<a href="http://noahsnail.com/2016/12/10/2016-12-11-Mac%E4%B8%8Bdlib%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">安装参考这里</a>)-</li></ul><p>关于dlib的安装，直接引用【SnailTyan】博文中的内容部分：</p><a id="more"></a><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd dlib/examples</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake .. -DUSE_SSE4_INSTRUCTIONS=ON</span><br><span class="line">cmake --build . --config Release</span><br></pre></td></tr></table></figure><h2 id="2、折磨人的坑"><a href="#2、折磨人的坑" class="headerlink" title="2、折磨人的坑"></a>2、折磨人的坑</h2><p>如果按照上面的执行完毕，其实，的确可以直接在终端窗口<code>import</code>成功。但是，当在pycharm中<code>import</code>时却找不到模块。在这个过程中，了解到有可能是因为【环境】问题，安装的dlib不是在当前环境之下。（此处，可以去了解下python的虚拟环境，会对项目版本控制有所帮助。不过目前为止，自己还没有真正去每个项目一个环境来用。）</p><p>仔细看执行完毕之后的信息，会发现有个<strong>Boost需要安装</strong>，而它也给出了安装的引导代码。当然，既然知道会有这个坑，我们肯定提前装好就行啦。</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">brew install cmake</span><br><span class="line">brew install boost</span><br><span class="line">brew install boost-python --with-python3</span><br><span class="line">//验证</span><br><span class="line">brew list | grep cmake</span><br><span class="line"><span class="hljs-meta">#</span> 如果成功安装，则有如下显示</span><br><span class="line">cmake</span><br><span class="line">brew list | grep boost</span><br><span class="line"><span class="hljs-meta">#</span> 如果boost和boost-python成功安装，则有如下显示</span><br><span class="line">boost</span><br><span class="line">boost-python</span><br></pre></td></tr></table></figure><p>这个时候，如果在pycharm中引用还报错，那就需要去看看:<br><code>pycharm -&gt; preference -&gt; project -&gt; project interpreter</code><br><code>run -&gt; edit configurations -&gt; project interpreter</code><br>两者所指定的解释器是否一致，设置成一致，理应结束采坑。</p><hr><p>参考：</p><ul><li><a href="http://noahsnail.com/2016/12/10/2016-12-11-Mac%E4%B8%8Bdlib%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">Mac下dlib安装</a></li><li><a href="https://zhuanlan.zhihu.com/p/28448206" target="_blank" rel="noopener">MAC安装Opencv以及Dlib碰到的一些问题</a></li><li><a href="https://www.jianshu.com/p/7665f015bc2b" target="_blank" rel="noopener">macOS下安装Dlib和Python2.7</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：当使用opencv做人脸检测的时候，从一些博文资料中了解到dlib的库貌似检测准确度比opencv高得多。于是，又是一番踩坑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1、必要的依赖&quot;&gt;&lt;a href=&quot;#1、必要的依赖&quot; class=&quot;headerlink&quot; title=&quot;1、必要的依赖&quot;&gt;&lt;/a&gt;1、必要的依赖&lt;/h2&gt;&lt;p&gt; dlib安装使用，是需要一些依赖的，亲测，的确是需要的。需要安装的依赖项如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;opencv(&lt;a href=&quot;http://flagsgo.xyz/2018/01/10/Mac-OS%E7%8E%AF%E5%A2%83%E4%B8%8B-%E5%AE%89%E8%A3%85-OpenCV-%E7%9A%84%E5%9D%91/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;安装可以看这里&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;openblas &amp;amp; X11(&lt;a href=&quot;http://noahsnail.com/2016/12/10/2016-12-11-Mac%E4%B8%8Bdlib%E5%AE%89%E8%A3%85/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;安装参考这里&lt;/a&gt;)-&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于dlib的安装，直接引用【SnailTyan】博文中的内容部分：&lt;/p&gt;
    
    </summary>
    
      <category term="深度学习" scheme="http://mutongfan.club/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="环境配置" scheme="http://mutongfan.club/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="人脸识别" scheme="http://mutongfan.club/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>iOS上架流程&amp;踩坑集</title>
    <link href="http://mutongfan.club/iOS%E4%B8%8A%E6%9E%B6%E6%B5%81%E7%A8%8B-%E8%B8%A9%E5%9D%91%E9%9B%86/"/>
    <id>http://mutongfan.club/iOS上架流程-踩坑集/</id>
    <published>2018-01-18T03:06:42.000Z</published>
    <updated>2019-07-12T07:43:10.438Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：不能上架的APP不是好APP。</p></blockquote><h2 id="上架流程"><a href="#上架流程" class="headerlink" title="上架流程"></a>上架流程</h2><blockquote><p><strong>1、</strong>当程序准备好之后，连接上一台真机，执行<strong><code>Product-&gt;Archive</code></strong>。</p></blockquote><p>ps：这里需要注意，在项目<strong>General-&gt;Identity-&gt;build</strong>每上传一次，就需要+1；版本号（Version）也需要进行适当的更改。</p><blockquote><p><strong>2、</strong>执行完第一步之后，会弹出一个新的窗口，选中自己生成的需要上传的APP，点击右边栏目中蓝色的<strong>Upload to App Store …</strong>按钮即可。接下来就是一路的<strong>Next</strong>。</p></blockquote><p>ps:如果一切配置都没问题，就会一路畅通到最后。</p><a id="more"></a><blockquote><p><strong>3、</strong>打开<a href="https://itunesconnect.apple.com/" target="_blank" rel="noopener">iTunes管理</a>，登录账号，在<strong>【我的APP】</strong>中选择上架的APP,如果是第一次上架那自然就是创建一个即可。</p></blockquote><p>ps: 目前还没有自己创建过APP，所以并不清楚有什么需要注意的地方。</p><blockquote><p><strong>4、</strong>点进上架的APP控制界面之后，在左侧栏目，需要创建一个新的版本，然后把相关的APP信息填写之后，执行完【2】成功之后邮箱过一会能够收到信息，这时刷新一下界面，【构建版本】就可以选择了。紧接着就是，【保存】-&gt;【提交】。</p></blockquote><p>ps:在提交的时候，会有一些选项，看自己的情况选择即可。目前，公司的项目貌似都是Next即可。</p><blockquote><p>*<em>WAITTING ^_^ GOOD LUCK *</em></p></blockquote><h2 id="坑坑"><a href="#坑坑" class="headerlink" title="坑坑"></a>坑坑</h2><h3 id="坑1"><a href="#坑1" class="headerlink" title="坑1"></a>坑1</h3><blockquote><p>在执行【2】步骤时，出现了<strong>秘钥没有安装的问题。</strong></p></blockquote><p>解决：</p><ul><li>首先，检查一下在【General】中，【Signing】是否勾选了【Automatically】，总之取消勾选。另外就是选择好对应（那就是不报错，不犯红）的dev和dis证书文件（Provisioning Profile）。</li><li>其次，可能需要安装p12文件，这个装的一直都是迷迷糊糊的……反正，这是一个方向吧</li></ul><h3 id="坑2"><a href="#坑2" class="headerlink" title="坑2"></a>坑2</h3><blockquote><p>在执行【2】步骤时，出现了需要<strong>输入电脑用户名和密码</strong>以访问钥匙链的一个窗口，却永无休止的提示而不会终止。</p></blockquote><p>解决：</p><ul><li>将证书文件从电脑钥匙链中的【系统】下面移到【登录】就可以解决，感谢一位不知名的群友。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：不能上架的APP不是好APP。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;上架流程&quot;&gt;&lt;a href=&quot;#上架流程&quot; class=&quot;headerlink&quot; title=&quot;上架流程&quot;&gt;&lt;/a&gt;上架流程&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1、&lt;/strong&gt;当程序准备好之后，连接上一台真机，执行&lt;strong&gt;&lt;code&gt;Product-&amp;gt;Archive&lt;/code&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ps：这里需要注意，在项目&lt;strong&gt;General-&amp;gt;Identity-&amp;gt;build&lt;/strong&gt;每上传一次，就需要+1；版本号（Version）也需要进行适当的更改。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;2、&lt;/strong&gt;执行完第一步之后，会弹出一个新的窗口，选中自己生成的需要上传的APP，点击右边栏目中蓝色的&lt;strong&gt;Upload to App Store …&lt;/strong&gt;按钮即可。接下来就是一路的&lt;strong&gt;Next&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ps:如果一切配置都没问题，就会一路畅通到最后。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS系列" scheme="http://mutongfan.club/categories/iOS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="经验整理" scheme="http://mutongfan.club/tags/%E7%BB%8F%E9%AA%8C%E6%95%B4%E7%90%86/"/>
    
      <category term="iOS" scheme="http://mutongfan.club/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Mac OS环境下 安装 OpenCV 的坑</title>
    <link href="http://mutongfan.club/Mac-OS%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85OpenCV(Python)/"/>
    <id>http://mutongfan.club/Mac-OS环境下安装OpenCV(Python)/</id>
    <published>2018-01-10T07:11:29.000Z</published>
    <updated>2019-07-12T07:43:12.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenCV简介以及安装"><a href="#OpenCV简介以及安装" class="headerlink" title="OpenCV简介以及安装"></a>OpenCV简介以及安装</h1><hr><h2 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h2><blockquote><p>OpenCV全称:Open Source Computer Vision Library，是一个开源的跨平台计算机视觉库，github地址：<a href="https://github.com/opencv/opencv。" target="_blank" rel="noopener">https://github.com/opencv/opencv。</a></p></blockquote><p>在进行<strong>人脸识别</strong>的课程练习中，需要添加<code>cv2</code>这个库，于是了解到指的就是OpenCV。首先尝试了直接用pycharm进行下载，当然是以失败告终，理由是版本问题……紧接着，找到一篇<a href="https://segmentfault.com/a/1190000007758856" target="_blank" rel="noopener">博文</a>，跟着步骤进行下载，倒是成功了。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我是直接使用Homebrew进行安装OpenCVC，没有使用pip，所以不清楚究竟哪个是最方便。直接在终端执行</p><blockquote><p>brew install opencv</p></blockquote><a id="more"></a><p>紧接着，会自己安装需要的依赖库，以及opencv。这里，一定要注意：<strong>OpenCV的安装目录为：/usr/local/Cellar/opencv/。</strong>当下载之后会用得到的。</p><p>OK，当一段时间过去，已经全部下载完毕。如果不幸出现问题，请自行解决，我运气比较好没在这个过程中遇到问题。这时，如果尝试，<code>import cv2</code> ,很不好意思，依然会是找不到模块。如果注意看终端信息，会发现有这么一句话：</p><blockquote><p>Python modules have been installed and Homebrew’s site-packages is not<br>in your Python sys.path, so you will not be able to import the modules<br>this formula installed. If you plan to develop with these modules,<br>please run:<br>  mkdir -p /Users/brooks/Library/Python/2.7/lib/python/site-packages<br>  echo ‘import site; site.addsitedir(“/usr/local/lib/python2.7/site-packages”)’ &gt;&gt; /Users/brooks/Library/Python/2.7/lib/python/site-packages/homebrew.pth</p></blockquote><p>大意就是，我们安装的库不在python能调用的路径之下，因此需要将文件<code>cv2.so</code>复制到<code>Python/site-packages</code>。另，此处的Python，可以使python2.7，也可以是python3.6。</p><h2 id="填坑"><a href="#填坑" class="headerlink" title="填坑"></a>填坑</h2><p>还记得切记记住的OpenCV安装路径吗？此时，就需要进入该路径下，找到openCV，并依次找到我们需要的文件cv2.so，然后移至上文说的路径之下即可。</p><p>此时，再重新打开pycharm，会发现可以成功<code>import cv2</code>。</p><p>ps：python3.6下的<strong>cv2</strong>名字有点长，需要改为<strong>cv2.so</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;OpenCV简介以及安装&quot;&gt;&lt;a href=&quot;#OpenCV简介以及安装&quot; class=&quot;headerlink&quot; title=&quot;OpenCV简介以及安装&quot;&gt;&lt;/a&gt;OpenCV简介以及安装&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;前因&quot;&gt;&lt;a href=&quot;#前因&quot; class=&quot;headerlink&quot; title=&quot;前因&quot;&gt;&lt;/a&gt;前因&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;OpenCV全称:Open Source Computer Vision Library，是一个开源的跨平台计算机视觉库，github地址：&lt;a href=&quot;https://github.com/opencv/opencv。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/opencv/opencv。&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在进行&lt;strong&gt;人脸识别&lt;/strong&gt;的课程练习中，需要添加&lt;code&gt;cv2&lt;/code&gt;这个库，于是了解到指的就是OpenCV。首先尝试了直接用pycharm进行下载，当然是以失败告终，理由是版本问题……紧接着，找到一篇&lt;a href=&quot;https://segmentfault.com/a/1190000007758856&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;博文&lt;/a&gt;，跟着步骤进行下载，倒是成功了。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;我是直接使用Homebrew进行安装OpenCVC，没有使用pip，所以不清楚究竟哪个是最方便。直接在终端执行&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;brew install opencv&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="深度学习" scheme="http://mutongfan.club/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="http://mutongfan.club/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="环境配置" scheme="http://mutongfan.club/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>逝去的2017，现在的2018</title>
    <link href="http://mutongfan.club/%E9%80%9D%E5%8E%BB%E7%9A%842017%EF%BC%8C%E7%8E%B0%E5%9C%A8%E7%9A%842018/"/>
    <id>http://mutongfan.club/逝去的2017，现在的2018/</id>
    <published>2018-01-03T12:57:25.000Z</published>
    <updated>2019-07-12T07:43:03.928Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言： 今天都已经是公历2018的第三天，险些又往后顺延码字。这便是一个最真实的写照——一面不甘，一面堕落。</p></blockquote><h1 id="跨年还是很开心的"><a href="#跨年还是很开心的" class="headerlink" title="跨年还是很开心的"></a>跨年还是很开心的</h1><p>原计划的跨年是和汤姑娘一起去绍兴，住宿都已经一早预定。然而，当知道小景子在31号晚上生日，便决定组织大家聚一波。起先，地点选在了上海，可当陪汤姑娘经历了上海考研的几天，再加上与小飞吃了顿饭之后，深感6个人若是在上海跨年之后恐怕新的一年就得开始吃土。</p><p>说来也巧，都已经过了检票的时间，幸亏安检员放行，和汤姑娘冲上高铁之后不到1分钟便关了门。当女朋友缓过气走向车厢时就听到她“咦”地一声，原来是看到了约好同班车的小飞。</p><p>回到苏州的家，先拉着小飞去了超市买上晚上聚餐的一些准备物品。再回到家没一会，紧接着便是小景子和他女票也下了公车。当带着小飞和小景子二人在市场逛荡着买火锅的原料时，最后一位到的鑫宇也下了公车。</p><a id="more"></a><p>一晚上，说不热闹吧，大家也是都吃的肚满肠肥，围着个锅不停地叽叽喳喳。说热闹吧，鑫宇女朋友没有来，多说有点心不在焉，话不多；科科没到不知道做着什么（后来视频，知道在外面也聚着）；汤姑娘虽然不认生，却也不熟只得自顾自的吃；剩下的三人多以聊着老板如何、论文如何、同门如何。</p><p>得知大家都是次日上午便要匆匆回到南京、上海、杭州，便匆匆拉着众人打车去了星巴克想着赶在打烊前庆生。结果，也只是喝了一杯，打了几局牌，在这人造的老街走了一圈又到景住的宾馆才赶在2018前5分钟点了蜡烛，又吹灭了蜡烛，分了蛋糕。是了，还有在我们的406大家庭打开了群视频，没来的二人也是都赶在了一起，庆了生&amp;跨了年。</p><p>一个人的生日，能够得到朋友真挚的祝福是很幸福的事，能赶在跨年这样的日子更是很幸运的事，希望小景子新的一年一切顺利，希望当晚的友人们及我一切顺利。</p><p>小飞和鑫宇最终还是没有找到住宿，在我家过了夜，和小景子分别时拥抱了一下。次日一早，7点多就被鑫宇的敲门声叫醒，赶紧着穿了衣服，一番洗漱，就骑车带着鑫宇到了公车站。和他拥抱，看着他上车，挥手，看着他坐下来，看着公车驶向前方，我便骑车回了家，上了床。</p><p>没有一会，小飞也起了床，说好给他下一晚热腾腾的面，待他吃完，便和他步行到车站，一路说了很多。车很快就来了，和他拥抱，看着他上车，挥手，看着他坐下来，看着公车驶向前方，我便走回了家……</p><p>这一天，是我的2018年的开始，从送别开始。</p><h1 id="演唱会原来有这么多人会哭"><a href="#演唱会原来有这么多人会哭" class="headerlink" title="演唱会原来有这么多人会哭"></a>演唱会原来有这么多人会哭</h1><p>汤姑娘喜欢张惠妹，某日，狠下决心买了2017.12.30晚，张惠妹上海演唱会的票。票是二层看台，差不多算是中央位置，一晚上下来感觉这个位置蛮好。刚到场时，感觉人貌似不多，周围也都是稀稀疏疏的几人。可是，当到了晚上7.30演唱会即将开始的时间时，整个梅赛德斯场馆里感觉满满的都是人，燥热。</p><p>汤姑娘坐在我左边，她的左边，是一对中年夫妻，男的比较沉稳，女的脸上还是透着点激动。再往左，有一个胖子兄，这位胖子兄可激动了，当一些快歌的时候，我这个位置是可以感受到他站起来蹦跳的震动。我的右边是自己一个人来的30岁上下的一个女人，刚来的时候有点手忙脚乱的，演唱会开始后便比较安静的看着听着，有时候又会出现点激动可是又有所克制，当周围都站起来一起跟着节奏蹦跳，她才释放的站了起来，可是很快又坐了下去。</p><p>有人追这场演唱会追了十几场，还打印了横幅。有人从台北一直追到这，张惠妹都知道他是双口吕的吕先生。</p><p>张惠妹一晚上哭了好几次，唱着哭着，哭着唱着，虽然我听不太出来哭腔。一些二十多岁的男男女女在哭，一些三四十的男人和女人在哭，汤姑娘也在我肩头哭了一两次（也有过一两次亲了我，牵我的手）。我不是很能理解，为什么这些人会哭，汤姑娘是个小孩，我还能理解，可是他们中更多的人是大人，是在外面承受再多委屈也不苦的那些人，为什么就一两首歌就哭了呢。不懂，不解。出了这个馆，外面还是很冷的，而且还下着小雨。出租车都把路口堵住了，后面的出租按喇叭，前面的冲着后面的嚷嚷。</p><p>地铁口，挤满了人，当我和汤姑娘被后面的人挤进了口子，今晚的演唱会也算是结束了。</p><blockquote><p>关于工作的总结记录展望啥的，等到真正的年来临之际再写出来。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言： 今天都已经是公历2018的第三天，险些又往后顺延码字。这便是一个最真实的写照——一面不甘，一面堕落。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;跨年还是很开心的&quot;&gt;&lt;a href=&quot;#跨年还是很开心的&quot; class=&quot;headerlink&quot; title=&quot;跨年还是很开心的&quot;&gt;&lt;/a&gt;跨年还是很开心的&lt;/h1&gt;&lt;p&gt;原计划的跨年是和汤姑娘一起去绍兴，住宿都已经一早预定。然而，当知道小景子在31号晚上生日，便决定组织大家聚一波。起先，地点选在了上海，可当陪汤姑娘经历了上海考研的几天，再加上与小飞吃了顿饭之后，深感6个人若是在上海跨年之后恐怕新的一年就得开始吃土。&lt;/p&gt;
&lt;p&gt;说来也巧，都已经过了检票的时间，幸亏安检员放行，和汤姑娘冲上高铁之后不到1分钟便关了门。当女朋友缓过气走向车厢时就听到她“咦”地一声，原来是看到了约好同班车的小飞。&lt;/p&gt;
&lt;p&gt;回到苏州的家，先拉着小飞去了超市买上晚上聚餐的一些准备物品。再回到家没一会，紧接着便是小景子和他女票也下了公车。当带着小飞和小景子二人在市场逛荡着买火锅的原料时，最后一位到的鑫宇也下了公车。&lt;/p&gt;
    
    </summary>
    
      <category term="记录" scheme="http://mutongfan.club/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="随笔" scheme="http://mutongfan.club/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Deep Learning 学习磨难记</title>
    <link href="http://mutongfan.club/Deep-Learning-%E5%AD%A6%E4%B9%A0%E7%A3%A8%E9%9A%BE%E8%AE%B0/"/>
    <id>http://mutongfan.club/Deep-Learning-学习磨难记/</id>
    <published>2017-12-19T13:22:15.000Z</published>
    <updated>2019-07-12T07:43:05.955Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言： 作为一名现役程序猿，个人博客理应是发布一些技术类文章为主，辅以生活&amp;兴趣等。结果，目前为止，我貌似算是比较多愁善感。</p></blockquote><p>最近一段时间在学习了Python之后，就像<strong>深度学习</strong>进军。结果，没走一步都如深陷泥沼，不知道是该感到难过还是幸运。难过，是这个经历的体现；幸运，若是趟过了这个磨难那于己来说必是大大有益。</p><p>目前为止，看了两本书，主要追一节视频，也看了不少其他的视频部分和文章一堆。最终，脑子里还是一团浆糊的状态。</p><p>关于，机器学习、人工智能、深度学习、监督分类、非监督分类、二分类、线性回归、非线性回归、神经元、神经网络、正向传播、反向传播、损失函数、成本函数&amp;梯度下降等这些名词多少还是有所明白。</p><p>BUT!但是！</p><a id="more"></a><p>此刻的我，当这些概念连在一起的时候，就是不能够理顺它们的关系。不理解，前者为什么要接着后者，为什么要用这个不用那个之类。<strong>字我都认得，文章却是看不懂。</strong></p><p>对了，还有就是数学的底子还是需要一些的，至少能够更好的理解公式或者更深入的理解理论依据吧。而这，又是我较为薄弱的地方。</p><p>不过，仔细想想，一般目前的从业者不是个博士也是个硕士，或者都是浸淫其中多年的老鸟了。我这个半路出家还全靠自学的家伙，又怎么能奢望着短短一周多的日子就即刻入门，还门儿清。</p><blockquote><p><strong>给自己几点建议：</strong></p><ul><li>把数学的一些相关知识重新找回来，夯实基础。</li><li>专注于吴恩达的视频课程即可，不要受其他干扰，信他就专注于他。</li><li>视频课程可以一股脑的先过着，但是编程题目必须弄明白！</li><li>自己结束一个课程，一定需要整理知识，并将知识点连贯。</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言： 作为一名现役程序猿，个人博客理应是发布一些技术类文章为主，辅以生活&amp;amp;兴趣等。结果，目前为止，我貌似算是比较多愁善感。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近一段时间在学习了Python之后，就像&lt;strong&gt;深度学习&lt;/strong&gt;进军。结果，没走一步都如深陷泥沼，不知道是该感到难过还是幸运。难过，是这个经历的体现；幸运，若是趟过了这个磨难那于己来说必是大大有益。&lt;/p&gt;
&lt;p&gt;目前为止，看了两本书，主要追一节视频，也看了不少其他的视频部分和文章一堆。最终，脑子里还是一团浆糊的状态。&lt;/p&gt;
&lt;p&gt;关于，机器学习、人工智能、深度学习、监督分类、非监督分类、二分类、线性回归、非线性回归、神经元、神经网络、正向传播、反向传播、损失函数、成本函数&amp;amp;梯度下降等这些名词多少还是有所明白。&lt;/p&gt;
&lt;p&gt;BUT!但是！&lt;/p&gt;
    
    </summary>
    
      <category term="深度学习" scheme="http://mutongfan.club/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="http://mutongfan.club/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Flagsgo之Demo(夭折)版</title>
    <link href="http://mutongfan.club/Flagsgo%E4%B9%8BDemo-%E5%A4%AD%E6%8A%98-%E7%89%88/"/>
    <id>http://mutongfan.club/Flagsgo之Demo-夭折-版/</id>
    <published>2017-12-06T08:02:08.000Z</published>
    <updated>2019-07-12T07:43:08.485Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>前言：终于，完成了Flagsgo的Demo版本。从诞生想法至今日，将近两个月有余，从而得出结论——自己的能力有太大的提升空间。</strong></p></blockquote><p>这段日子，做了个Demo——Flagsgo</p><p><video controls="controls" src="http://7xp6za.com1.z0.glb.clouddn.com/blog/project/flagsgo/QQ20171206-155249-HD.mp4" height="360" width="30%"></video></p><h1 id="想法之初"><a href="#想法之初" class="headerlink" title="想法之初"></a>想法之初</h1><p>大致三个月前建了个微信群，拉着小景子与大飞侠每天打卡背单词，特地在公平自愿的原则下立了规矩——无论何种理由，只要有一天没有打卡便要认罚（红包&amp;罚抄）。目前，自己已经发出三次共计70元的红包，罚抄1500+的words。随之而来的是，<strong>每天与这两位仁兄在毕业后也多了一份羁绊，另外便是词汇量多少还是有所增加。</strong></p><p>与此同时，一种想要做个东西的想法又按不住的冒了头。其实，以前在学校做Android的时候也有过一些idea，出现过和图书相关的一个idea，还出现过和宠物社交相关的idea，貌似还有过一个记不清的idea。显而易见的是，<strong>以往的想法并没有付诸于coding。</strong></p><p>当某个周末的洗澡过程中，脑海中一系列的化学反应之下，关于Flagsgo的idea就自己跑了出来。穿好衣服从卫生间跑出来，便赶紧跟汤姑娘阐述自己的所想，好似面对着自己的投资人一般……</p><blockquote><p><strong>畅想版本:</strong> Flagsgo，未来的它一定是能对用户做出正向的影响，而且本身具有一定的商业价值。Flagsgo通过备忘提醒这个核心嵌入点，加入好友互助提醒分赏金的游戏方式，可以同时兼有【工具】、【社交】和【金融】的因子。</p></blockquote><a id="more"></a><h1 id="行动之初"><a href="#行动之初" class="headerlink" title="行动之初"></a>行动之初</h1><h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h2><p>在一张大纸上<strong>思维导图式的整理了下最初的想法</strong>，紧接着便计划把整个UI的草稿涂涂画画，在画初稿的过程中想到可以用<strong>Sketch</strong>做icon和logo等。但是，当自己上手的时候发现脑海的想法并不方便实现，而且我并不会制作icon和logo。</p><p>在网上找了几篇Sketch的教程，对软件本身的简单使用的确不成问题。然而，就像会用笔不代表写得了书法一般，没有设计的基础和积累，我的脑海是一片空白。直到最后转到使用墨刀，做了一两个界面之后又开始了边开发边考虑布局等等。</p><h2 id="iOS实现"><a href="#iOS实现" class="headerlink" title="iOS实现"></a>iOS实现</h2><h2 id="核心功能的精简"><a href="#核心功能的精简" class="headerlink" title="核心功能的精简"></a>核心功能的精简</h2><p>一开始想着要有社交，要有类似红包这样的游戏功能，另外便是最基本的提醒功能。尽管在做了一定了解之后发现做即时通信有现成的SDK可以使用，红包功能也可以想着用微信或者支付宝来曲线救国。实际开发时，却发现要在最初版本做到这些对于自己实在是太大的工作量，而且由于目前没有架构的能力，可以预见之后的版本一定是推倒前面重写……</p><p>最终，各种功能是砍了又砍<em>（ps.最开始想着直接把金融这块功能做了，绝对是年少轻狂不懂事）</em>，最终便只剩下了如下的主要功能：</p><blockquote><p><strong>实际版本:</strong> 实际的开发中，发现自己一个人能力有限，而且有些事情现在没有办法实施。而且，当发现市场上竟然有类似自己畅想版本的App存在，在开发的原动力上多少有点打击。如此一来，便真的只是纯纯的锻炼自己。保留最最基本的工具功能，备忘提醒。加上诗词欣赏以及查看当地天气这两项功能。</p></blockquote><h2 id="最烦的是逻辑"><a href="#最烦的是逻辑" class="headerlink" title="最烦的是逻辑"></a>最烦的是逻辑</h2><p><strong>Coding的过程是很难受的，因为不断发现想法很好实现很难，干脆不会。</strong>虽然，到最后这个Demo版本，基本没有任何有难度的功能，至少看起来单一的功能都的确是简单。可是，这里面也有不少知识点，特别是和业务逻辑结合在一起就更是如此。</p><ul><li>iOS不知道怎么实现闹钟功能，反正找不到直接调用系统闹钟的方法。最后就取巧，通过本地通知的形式做提醒。知识点1：多个通知的唯一标识不能相同，否则无法响应通知。</li><li>获取经纬度，地理编码转码。</li><li>【收藏】功能多处的联动。</li><li>数据本地存储，以及根据业务逻辑的增删。</li><li>TextView自适应高度。</li><li>TableView的类型选择，以及使用。</li><li>……</li></ul><h2 id="Python之数据-amp-服务"><a href="#Python之数据-amp-服务" class="headerlink" title="Python之数据&amp;服务"></a>Python之数据&amp;服务</h2><p>很久以前想过做爬虫，认为会写爬虫的程序猿比较cool，也比较极客风。能这么说，肯定是以前被爬虫给唬住了，止步了。事实证明，毛爷爷说的太对了——<strong>XXX都是纸老虎。</strong></p><h3 id="Python学习"><a href="#Python学习" class="headerlink" title="Python学习"></a>Python学习</h3><p>在同事那里借了一本Python的书，便开始了差不多一个多星期的Python之旅。过语法用了差不多两天的样子，两年前边看边敲了一遍《Learn Python the hard way》，可是再回顾语法的时候真的是没太多印象。这又证明了——<strong>如果一门技能或知识学了不用，时间久了，生疏可能是最好的结果</strong>。</p><p>过完语法之后的自己，又开始拿着书敲一个游戏的例子。刚开始还好，有股子冲劲，可人真的是有惰性的。而我更是好吃懒做，巴不得这本书我只看一眼就能很熟练的掌握，以致于在这个学习的过程中越敲代码越抗拒越吃力。</p><p>好在，最终拖拖拉拉的一个星期总算把游戏的例子敲完，剩下关于数据分析和web应用程序开发的能容则是看了好几遍。在这里，真的是庆幸自己毕业后来到的单位不是血汗工厂，而且所在的部门氛围特别舒服，自己得以在工作中还能继续学习。<em>（可惜我这马屁了，老大看不到）</em></p><h3 id="爬虫获取数据"><a href="#爬虫获取数据" class="headerlink" title="爬虫获取数据"></a>爬虫获取数据</h3><p>回到正题，Python爬虫，网上有好多例子，可是不知道为啥子就是不想跟着敲那种爬百度百科的，爬淘宝MM的<em>（不爬MM图片，这不应该呀……）</em>。自己直接根据一个爬二手车信息的例子，写起了爬某个诗词网站的爬虫程序。爬二手车信息的例子唯一能给自己的帮助就是，原来要用这几个库，以及了解到简单的爬虫就是：<strong>访问网页-&gt;解析HTML-&gt;抓取数据-&gt;存储数据</strong>。</p><p>在经过解析诗词网站的HTML，和解决解析数据与存取数据出先的BUG之后，终于完成了自己的第一版Python爬虫。</p><h3 id="MongoDB存取数据"><a href="#MongoDB存取数据" class="headerlink" title="MongoDB存取数据"></a>MongoDB存取数据</h3><p>数据存储一开始，自己是直接写在了文件之中。可是当试图开始要去发布服务，为iOS展示诗词提供数据时，发现服务返回的应该是JSON，文件处理起来就感觉比较麻烦。便进了MongoDB这个坑，当然，以我爬到的几千首诗词用其他的数据库也无不妥。</p><p>遇到新的知识，只好又是看博客，反正数据库以前也是用过的，而且那时候在班里也是能66的教其他同学。果不其然，简单的数据增删改查很简单，而且数据可以直接导出成json格式，这简直太棒了。</p><p><em>ps.值得一提的是，MongoDB原来是看不到的呀。</em></p><h3 id="Flask发布服务"><a href="#Flask发布服务" class="headerlink" title="Flask发布服务"></a>Flask发布服务</h3><p>之前复刻项目和做项目时，网络请求数据或上传数据就总用到服务，感觉这是个很厉害的东西，别人只是给了自己一个接口，但是却处理了很多事。</p><p>3年前其实就接触过服务端，那时候是为了给第一个Android项目写数据的上传下载，可是实验室没人写后端服务，自己也没有后端的概念。刚开始，看到一些博客的例子，很是不理解为什么自己照着写，可是每次进行上传或者下载的时候就报错。在这，纠结了一周左右用PHP写了个小服务，才自己摸索到了后端相关的一些概念，那时候的自己真是不开窍。</p><p>又说多了。因为多少有点相关概念在脑子，而且知道Python可以写服务，正好组里有高手。通过高人指点，直接看Flask的一个教程，跟着敲了几行代码，渐渐有了头绪。刚开始只能本机访问，后来能够做到局域网内访问，最后不仅可以服务发数据<em>（例如，服务发布诗词数据）</em>，还能接受数据<em>（例如，收到用户反馈的信息并写入文件）</em>。</p><h1 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h1><p>虽然Flagsgo的Demo版本没有进行上架（哪里有脸上架），而且服务也没有弄在公网上，但是基本对一个App<strong>想法-&gt;实现</strong>走了一遍流程。</p><p>简单的总结如下：</p><blockquote><ul><li>坚持，真的是会有收获。</li><li>一个人的能力实在有限，难以面面俱到。但这不妨碍我们朝着全栈发展，只是个人感觉，还是要有所突出。</li><li>宏观上的产品架构薄弱，App整体设计与开发的架构能力都等于无能力。</li><li>目前开发效率低下，状态基本是边开发，边想，边调整，边学习这般循环。如果自己一个人做个产品，迭代速度会跟不上。</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;前言：终于，完成了Flagsgo的Demo版本。从诞生想法至今日，将近两个月有余，从而得出结论——自己的能力有太大的提升空间。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这段日子，做了个Demo——Flagsgo&lt;/p&gt;
&lt;p&gt;&lt;video controls=&quot;controls&quot; src=&quot;http://7xp6za.com1.z0.glb.clouddn.com/blog/project/flagsgo/QQ20171206-155249-HD.mp4&quot; height=&quot;360&quot; width=&quot;30%&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;h1 id=&quot;想法之初&quot;&gt;&lt;a href=&quot;#想法之初&quot; class=&quot;headerlink&quot; title=&quot;想法之初&quot;&gt;&lt;/a&gt;想法之初&lt;/h1&gt;&lt;p&gt;大致三个月前建了个微信群，拉着小景子与大飞侠每天打卡背单词，特地在公平自愿的原则下立了规矩——无论何种理由，只要有一天没有打卡便要认罚（红包&amp;amp;罚抄）。目前，自己已经发出三次共计70元的红包，罚抄1500+的words。随之而来的是，&lt;strong&gt;每天与这两位仁兄在毕业后也多了一份羁绊，另外便是词汇量多少还是有所增加。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与此同时，一种想要做个东西的想法又按不住的冒了头。其实，以前在学校做Android的时候也有过一些idea，出现过和图书相关的一个idea，还出现过和宠物社交相关的idea，貌似还有过一个记不清的idea。显而易见的是，&lt;strong&gt;以往的想法并没有付诸于coding。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当某个周末的洗澡过程中，脑海中一系列的化学反应之下，关于Flagsgo的idea就自己跑了出来。穿好衣服从卫生间跑出来，便赶紧跟汤姑娘阐述自己的所想，好似面对着自己的投资人一般……&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;畅想版本:&lt;/strong&gt; Flagsgo，未来的它一定是能对用户做出正向的影响，而且本身具有一定的商业价值。Flagsgo通过备忘提醒这个核心嵌入点，加入好友互助提醒分赏金的游戏方式，可以同时兼有【工具】、【社交】和【金融】的因子。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Works系列" scheme="http://mutongfan.club/categories/Works%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="iOS" scheme="http://mutongfan.club/tags/iOS/"/>
    
      <category term="SideProject" scheme="http://mutongfan.club/tags/SideProject/"/>
    
  </entry>
  
  <entry>
    <title>python学习实例记录</title>
    <link href="http://mutongfan.club/python%E5%AD%A6%E4%B9%A0%E5%AE%9E%E4%BE%8B%E8%AE%B0%E5%BD%95/"/>
    <id>http://mutongfan.club/python学习实例记录/</id>
    <published>2017-11-27T07:30:20.000Z</published>
    <updated>2019-07-12T07:43:17.565Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：尽管只用对着书本敲代码，都险些中断了这个python实例的练习。终于，完成。</p></blockquote><p><strong>1.游戏</strong></p><p><strong>“打飞机”</strong>这个实例完全是照着书本进行，除了出现过两三次由于粗心抄错了字母这样的情况，整个项目手打下来并没有遇到奇怪的问题。而且，跟着书本进行，也没有不能理解的地方。特别值得一提的是，一定要根着书本的进程敲代码，不要直接下载资源跑源码。</p><p>跟着书本进行，作者会引导着如何重构代码，更能深入的体会到面向对象的编程以及养成良好的编码习惯——注释、命名和抽象方法等。</p><p>而关于游戏的实现，则主要是依赖<code>pygame</code>这个第三方库的使用。</p><ul><li>屏幕显示</li><li>事件处理</li><li>绘制图形</li><li>Sprite</li><li>……</li></ul><p><strong>Talk is cheap, Show you the code</strong></p><p><em>ps.<a href="https://github.com/brookslq/PythonLearn/tree/master/alien_invasion" target="_blank" rel="noopener">click me to github</a></em></p><a id="more"></a><p><strong>2.数据可视化</strong></p><p>关于<strong>数据可视化</strong>，主要会使用到两个包：<code>matplotlib</code>和<code>Pygal</code>。</p><ul><li><p>matplotlib是一个数学绘图库，可以使用它进行图表绘制，如折线图和散点图等。直接进入<a href="http://matplotlib.org/tutorials/introductory/sample_plots.html" target="_blank" rel="noopener">官网</a>，点击图表，就可以看到源码进行学习。</p></li><li><p>Pygal是一个SVG图表库，专注于生成适合在数字设备上显示的图表，通过它可以优化用户与图表直间的交互。</p></li></ul><p><strong>3.Web应用</strong></p><p><strong>Django</strong>是一个Web框架——一套用于帮助开发交互式网站的工具。通过它可以让开发者修改或直接使用“模板”，创建自己的Web应用程序。</p><hr><blockquote><p>后记：后面两个项目并没有进行实践，只是阅读了书本进行了解，待到有需求动力时或者过段时间也许再进行实践。</p></blockquote><p> <a href="https://github.com/brookslq/PythonLearn/tree/master/python_basic" target="_blank" rel="noopener">直接上自己的练习代码！</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：尽管只用对着书本敲代码，都险些中断了这个python实例的练习。终于，完成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;1.游戏&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“打飞机”&lt;/strong&gt;这个实例完全是照着书本进行，除了出现过两三次由于粗心抄错了字母这样的情况，整个项目手打下来并没有遇到奇怪的问题。而且，跟着书本进行，也没有不能理解的地方。特别值得一提的是，一定要根着书本的进程敲代码，不要直接下载资源跑源码。&lt;/p&gt;
&lt;p&gt;跟着书本进行，作者会引导着如何重构代码，更能深入的体会到面向对象的编程以及养成良好的编码习惯——注释、命名和抽象方法等。&lt;/p&gt;
&lt;p&gt;而关于游戏的实现，则主要是依赖&lt;code&gt;pygame&lt;/code&gt;这个第三方库的使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;屏幕显示&lt;/li&gt;
&lt;li&gt;事件处理&lt;/li&gt;
&lt;li&gt;绘制图形&lt;/li&gt;
&lt;li&gt;Sprite&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Talk is cheap, Show you the code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;ps.&lt;a href=&quot;https://github.com/brookslq/PythonLearn/tree/master/alien_invasion&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;click me to github&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python系列" scheme="http://mutongfan.club/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Python" scheme="http://mutongfan.club/tags/Python/"/>
    
      <category term="Pygame" scheme="http://mutongfan.club/tags/Pygame/"/>
    
      <category term="matplotlib" scheme="http://mutongfan.club/tags/matplotlib/"/>
    
      <category term="Pygal" scheme="http://mutongfan.club/tags/Pygal/"/>
    
      <category term="Django" scheme="http://mutongfan.club/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>对美好生活的憧憬</title>
    <link href="http://mutongfan.club/%E5%AF%B9%E7%BE%8E%E5%A5%BD%E7%94%9F%E6%B4%BB%E7%9A%84%E6%86%A7%E6%86%AC/"/>
    <id>http://mutongfan.club/对美好生活的憧憬/</id>
    <published>2017-11-25T11:43:24.000Z</published>
    <updated>2019-07-12T07:42:54.453Z</updated>
    
    <content type="html"><![CDATA[<p>北京时间：2017年11月25日，晚19点44分。</p><p>坐标：苏州——某星巴克。</p><hr><blockquote><p>前言：离汤姑娘考研不到一个月，一个月后的生活充满了极大的不确定因素，但我依然也必须——对未来的生活充满美好憧憬。</p></blockquote><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><p>近来，脑子里依然是有点混乱，又开始想着不知道条条通罗马的路我该走哪一条。准确点说，多想有个人告诉我：李小子，做这些事就行了，然后你就可以得到你想得到的。</p><p>话说，我想得到些什么呢?不如，让我暂且列举下：</p><ul><li>把家里的事平了</li><li>工作，能让自己充满兴趣与激情，待遇自然得好</li><li>想做一个自己的产品——即便不能改变世界，也能正向的影响到部分人</li><li>结婚这件事，终归是要尽可能在25~28这段时间做到</li><li>如果上面的事情都结束了，出一本自己的书……</li><li>接下来的日子应该得为孩子打拼一段时间……</li><li>牵挂不断增加：父母，妻子和重要的亲朋，很多相关的事可能接踵而来，不由人</li><li>自己总归会找到至少一两件兴趣所在的事，并有所投入</li><li>抛开身不由己……</li><li>不如，做一个浑浑噩噩的人？</li><li>不对，做一个睁眼看世界的人。</li><li>最终，步入人生的必经之站……</li></ul><p>如果，似上面这般想来，突然间觉得有点庆幸——并没有人告诉自己去罗马要走哪条路，路上又会遇到些怎样的人物，发生怎样的故事或者事故。</p><a id="more"></a><h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2><p><strong>对未来的生活，终归是充满美好憧憬。</strong>在公司里，经过差不多半年的学习终于也已经上手项目并完成任务。与汤姑娘的生活状态，也基本呈现稳定的状态，最有可能的波折应该就是考研之后这一段时期。至于家里的事，也罢，目前还不需要自己出场。</p><p>在小专栏上，竟然真的有人订阅自己的<strong>“木头的iOS填坑之路”</strong>，到账27元有余，小小激动。简书虽然长久未更新，但之前关于考研英语语法的整理依然时不时有人点赞。以及，个人博客的搭建，这些都在激励着自己进行写作。<em>（ps.当然是和作家的写作，不必相比）</em></p><p>工作虽然不是很忙碌，甚至闲暇的时间还是比较充裕。一开始，自己也是有点混乱：一方面，想着以写<strong>“木头的iOS填坑之路”</strong>为契机整理所学，然而发现枯燥繁琐而且对自己的提升貌似不大就有所松懈。另一方面，想着加深iOS技术的学习，打算从RxSwift，RN开发，机器学习在iOS中的应用还有ARKit。可是当小老大变相的打击了学RxSwift的积极性之后，就对这一条发展路径开始了犹豫不定。还有一方面是，想着以<strong>FlagsGo</strong>这个个人Project为契机，整合所学，并学习新的内容（比如：网络爬虫、UI设计、文档编写和产品经理相关内容等）。目前来说，主要就是以这条路线在进行自学，其他两条路线时不时进行。</p><p>当把上面这一段文字在闹钟整理并输出之后，突然间又好像有一阵豁然开朗，我所需要做的就是把事情做完一件再做完一件。在我的工作和生活中如果没有出现新的机遇，以上的学习是我现在正需要的，无论是从本职工作出发还是本职之上的扩展。如果说，另外还需要做点什么，那只有两件：<strong>读书</strong>和<strong>锻炼</strong>。</p><h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><p>看来，我还是找到了病症所在——希望不经历点困难和过程就能得到最后的果实，以及惰性萌生。</p><ul><li>与汤姑娘的路，携手向前，就一定能到期许的那一天——埋在一起长眠。</li><li>家里的事，早已论证多次，这就不是事。</li><li>至于自己，一定是一个很棒的人。</li></ul><p>汤姑娘差不多画画结束，该走了。</p><p>曾几何时，看到星巴克是不敢进去的，还有必胜客也有类似的感觉，而K记和M记倒不至于。</p><p>有的话可以说的绝对些——<strong>人唯有自强方能自立。</strong></p><p>希望自己，耐得住枯寂，未来的美好生活就在脚下不远处。</p><hr><blockquote><p>后记：真的，真的，真的需要减肥和锻炼身体。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;北京时间：2017年11月25日，晚19点44分。&lt;/p&gt;
&lt;p&gt;坐标：苏州——某星巴克。&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;前言：离汤姑娘考研不到一个月，一个月后的生活充满了极大的不确定因素，但我依然也必须——对未来的生活充满美好憧憬。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1.&quot;&gt;&lt;/a&gt;1.&lt;/h2&gt;&lt;p&gt;近来，脑子里依然是有点混乱，又开始想着不知道条条通罗马的路我该走哪一条。准确点说，多想有个人告诉我：李小子，做这些事就行了，然后你就可以得到你想得到的。&lt;/p&gt;
&lt;p&gt;话说，我想得到些什么呢?不如，让我暂且列举下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把家里的事平了&lt;/li&gt;
&lt;li&gt;工作，能让自己充满兴趣与激情，待遇自然得好&lt;/li&gt;
&lt;li&gt;想做一个自己的产品——即便不能改变世界，也能正向的影响到部分人&lt;/li&gt;
&lt;li&gt;结婚这件事，终归是要尽可能在25~28这段时间做到&lt;/li&gt;
&lt;li&gt;如果上面的事情都结束了，出一本自己的书……&lt;/li&gt;
&lt;li&gt;接下来的日子应该得为孩子打拼一段时间……&lt;/li&gt;
&lt;li&gt;牵挂不断增加：父母，妻子和重要的亲朋，很多相关的事可能接踵而来，不由人&lt;/li&gt;
&lt;li&gt;自己总归会找到至少一两件兴趣所在的事，并有所投入&lt;/li&gt;
&lt;li&gt;抛开身不由己……&lt;/li&gt;
&lt;li&gt;不如，做一个浑浑噩噩的人？&lt;/li&gt;
&lt;li&gt;不对，做一个睁眼看世界的人。&lt;/li&gt;
&lt;li&gt;最终，步入人生的必经之站……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果，似上面这般想来，突然间觉得有点庆幸——并没有人告诉自己去罗马要走哪条路，路上又会遇到些怎样的人物，发生怎样的故事或者事故。&lt;/p&gt;
    
    </summary>
    
      <category term="记录" scheme="http://mutongfan.club/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="随笔" scheme="http://mutongfan.club/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
